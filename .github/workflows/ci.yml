name: Full CI/CD Pipeline

on:
  workflow_dispatch:  # Manual trigger
  release:
    types: [ published ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Install package in development mode
      run: uv pip install -e .
    
    - name: Run tests with coverage
      run: uv run pytest --cov=excludarr --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Test CLI help command
      run: uv run excludarr --help
    
    - name: Test config validation (should fail with missing config)
      run: uv run excludarr config validate || true
    
    - name: Test provider list command
      run: uv run excludarr providers list --popular

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Install linting tools
      run: uv add --dev ruff black isort mypy
    
    - name: Run ruff linter
      run: uv run ruff check excludarr/
    
    - name: Run black formatter check
      run: uv run black --check excludarr/
    
    - name: Run isort import check
      run: uv run isort --check-only excludarr/
    
    - name: Run mypy type checking (allow failures for now)
      run: uv run mypy excludarr/ || true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync
    
    - name: Build package
      run: uv build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: excludarr-dist
        path: dist/
        retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync
    
    - name: Install safety
      run: uv add --dev safety
    
    - name: Run safety check
      run: uv run safety check --json || true
    
    - name: Run bandit security linter
      run: |
        uv add --dev bandit
        uv run bandit -r excludarr/ -f json || true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.12
    
    - name: Install dependencies
      run: uv sync
    
    - name: Install package
      run: uv pip install -e .
    
    - name: Create test config
      run: |
        cat > test_config.yml << EOF
        sonarr:
          url: "http://localhost:8989"
          api_key: "test_api_key_1234567890123456789012"
        
        provider_apis:
          tmdb:
            api_key: "test_tmdb_key"
            enabled: true
        
        streaming_providers:
          - name: "netflix"
            country: "US"
        
        sync:
          action: "unmonitor"
          dry_run: true
          exclude_recent_days: 7
        EOF
    
    - name: Test config validation
      run: uv run excludarr --config test_config.yml config validate || echo "Expected to fail - test environment"
    
    - name: Test provider commands
      run: |
        uv run excludarr providers list --country US | head -10
        uv run excludarr providers info netflix || true
        uv run excludarr providers stats

  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build, security, integration-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: excludarr-dist
        path: dist/
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Publish to PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: uv publish